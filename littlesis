#!/bin/bash

show_help() {
cat << EOF
Usage: ./littlesis rails|php
Helpful shortcuts to the LittleSis development environment

Start app:
littlesis up or littlesis up -d

Stop app:
littlesis down

Enter mysql shell: 
littlesis mysql

Information:
littlesis ps
littlesis logs

Login to the containers:
littlesis rails login
littlesis php login

Run all rails tests:
littlesis rails spec
or run one test file. example:
littlesis rails spec spec/models/relationship_spec.rb

PHP sphinx functions:
littlesis sphinx status
littlesis sphinx start
littlesis sphinx stop
littlesis sphinx index

Rails console: littlesis rails c

Rails logs: littlesis rails logs

Nginx logs: littlesis nginx access|error

Restart rails: littlesis rails restart

Execute arbitrary rake command: littlesis rails rake [...]

For instance, to restart sphinx: littlesis rails rake ts:restart

EOF
}


docker_login() {
    if [ "$1" == rails ]; then
	docker exec -t -i littlesisdocker_web_1 /bin/bash -l
    elif [ "$1" == php ]; then
	docker exec -t -i littlesisdocker_php_1 /bin/bash -l
    fi
}

spec() {
    local CMD="cd /home/app/lilsis && RAILS_ENV=test bundle exec spring rspec ${@}"
    docker exec --user app -it littlesisdocker_web_1 /bin/sh -c "${CMD}"
}

rails_console() {
    docker-compose exec web su app -c 'cd /home/app/lilsis; RAILS_ENV=development bin/rails c'
}

rails_rake() {
    local CMD="cd /home/app/lilsis && RAILS_ENV=test bundle exec rake RAILS_ENV=development ${@}"
    docker-compose exec web su app -c "${CMD}"
}

rails_logs() {
    docker-compose exec web /bin/bash -c 'tail -f /home/app/lilsis/log/development.log'
}

rails_restart() {
    docker-compose exec web /bin/bash -c 'passenger-config restart-app /home/app/lilsis'
}

nginx_logs() {
    if [[ "$1" == access || "$1" == error ]]; then
	local log_file="/var/log/nginx/${1}.log"
	docker-compose exec web /bin/bash -c "tail -f ${log_file}"
    else
	echo 'There are only two nginx logs available: access and error'
	exit 1
    fi
}

rails() {
    case $1 in
	spec)
	    shift
	    spec "$@"
	    ;;
	login)
	    docker_login rails
	    ;;
	console|c)
	    rails_console
	    ;;
	logs)
	    rails_logs
	    ;;
	rake)
	    shift
	    rails_rake "$@"
	    ;;
	restart)
	    rails_restart
	    ;;
	*)
	    echo 'Invalid option. Available options: spec, login, console, logs, rake'
    esac
}


php_sphinx() {
    case $1 in
	start)
	    docker-compose exec php /bin/bash -c 'searchd --config /var/www/littlesis/symfony/config/sphinx.conf'
	    ;;
	index)
	    docker-compose exec php /scripts/index_php_sphinx.sh
	    ;;
	stop)
	    docker-compose exec php /bin/bash -c 'searchd --config /var/www/littlesis/symfony/config/sphinx.conf --stop'
	    ;;
        *)
	    docker-compose exec php /bin/bash -c 'searchd --config /var/www/littlesis/symfony/config/sphinx.conf --status'
	    ;;
    esac
}


php() {
    case $1 in
	login)
	    docker_login php
	    ;;
	sphinx)
	    php_sphinx $2
	    ;;
    esac
}

while :; do
    case $1 in
	rails)
	    shift
	    rails "$@"
	    exit
	    ;;
        symfony|php)
	    shift
	    php  "$@"
	    exit
	    ;;
	up)
	    if [ "$2" == -d ]; then
		docker-compose up -d
	    else
		docker-compose up
	    fi
	    exit
	    ;;
	down|ps|logs)
	    docker-compose "$1"
	    exit
	    ;;
	nginx)
	    shift
	    nginx_logs "$@"
	    exit
	    ;;
	mysql)
	     mysql -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis
	     exit
	     ;;
	-h|help|--help)
	    show_help
	    exit
	    ;;
	?*) # End of all options.
            echo 'first arg must one of these options: rails, php, up, down, ps, logs, mysql, help, nginx'
            exit 1
	    ;;
	*)
	    break
	    ;;
    esac
done
